###############################################################################################################
# HiPR-FISH : simulation of probe coverage with different design parameters
###############################################################################################################

import re
import os
import glob
import pandas as pd
from Bio import Seq
from Bio import SeqIO
from snakemake.io import expand, glob_wildcards

###############################################################################################################
# Helper functions
###############################################################################################################

def get_simulation_summary_filenames(sim_input_filename):
    sim_output_filename = re.sub('.csv', '_results.csv', sim_input_filename)
    return(sim_output_filename)

def get_simulation_list(sim_input_filename, data_dir):
    sim_tab = pd.read_csv(sim_input_filename)
    design_list = sim_tab.DESIGN_ID.tolist()
    return(design_list, sim_tab)

def get_sample_input_fasta_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    input_fasta_filename = '{}/{}/input/{}.fasta' % (data_dir, sample, sample)
    return(input_fasta_filename)

def get_sim_target_rank(sim_tab, design_id):
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    return(target_rank)

def get_sim_mch(sim_tab, design_id):
    mch = sim_tab[sim_tab.DESIGN_ID == design_id].MAX_CONTINUOUS_HOMOLOGY.values[0]
    return(mch)

def get_sim_mintm(sim_tab, design_id):
    mintm = sim_tab[sim_tab.DESIGN_ID == design_id].MIN_TM.values[0]
    return(mintm)

def get_sim_maxtm(sim_tab, design_id):
    maxtm = sim_tab[sim_tab.DESIGN_ID == design_id].MAX_TM.values[0]
    return(maxtm)

def get_sim_gc(sim_tab, design_id):
    gc = sim_tab[sim_tab.DESIGN_ID == design_id].GC.values[0]
    return(gc)

def get_sim_otu(sim_tab, design_id):
    otu = sim_tab[sim_tab.DESIGN_ID == design_id].OTU.values[0]
    return(otu)

def get_sim_na(sim_tab, design_id):
    na = sim_tab[sim_tab.DESIGN_ID == design_id].SODIUM.values[0]
    return(na)

def get_sim_dnac1oligo(sim_tab, design_id):
    dnac1_oligo = sim_tab[sim_tab.DESIGN_ID == design_id].DNACONC.values[0]
    return(dnac1_oligo)

def get_sim_probe_selection_method(sim_tab, design_id):
    probe_selection_method = sim_tab[sim_tab.DESIGN_ID == design_id].PROBE_SELECTION_METHOD.values[0]
    return(probe_selection_method)

def get_sim_tpn(sim_tab, design_id):
    tpn = sim_tab[sim_tab.DESIGN_ID == design_id].TPN.values[0]
    return(tpn)

def get_oriented_fasta_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    oriented_fasta_filename = '{}/{}/input/{}.oriented.fasta'.format(data_dir, sample, sample)
    return(oriented_fasta_filename)

def get_blast_lineage_filename(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    blast_lineage_filename = '{}/{}/utilities/blast_lineage.tab'.format(data_dir, sample, sample)
    return(blast_lineage_filename)

def get_probe_evaluation_filename(sim_tab, design_id, design_target, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    probe_evaluation_filename = '{}/{}/evaluate/{}/{}_probe_evaluation.h5'.format(data_dir, sample, target_rank, design_target)
    return(probe_evaluation_filename)

def get_utilities_directory(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    util_dir = '{}/{}/utilities/'.format(data_dir, sample)
    return(util_dir)

def get_evaluation_directory(sim_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    evaluation_dir = '{}/{}/evaluate/'.format(data_dir, sample)
    return(evaluation_dir)

def get_taxon_probe_evaluation_complete_filename(sim_tab, design_id, taxon):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    target_rank = sim_tab[sim_tab.DESIGN_ID == design_id].TARGET_RANK.values[0]
    taxon_probe_evaluation_filename = '{}/{}/evaluate/{}/{}_probe_evaluation_complete.txt'.format(data_dir, sample, target_rank, taxon)
    return(taxon_probe_evaluation_filename)

def get_sim_freq_ll(sim_tab, design_id):
    freq_ll = sim_tab[sim_tab.DESIGN_ID == design_id].FREQLL.values[0]
    return(freq_ll)

def get_sim_bot(sim_tab, design_id):
    bot = sim_tab[sim_tab.DESIGN_ID == design_id].BOT.values[0]
    return(bot)

def get_sim_bplc(sim_tab, design_id):
    bplc = sim_tab[sim_tab.DESIGN_ID == design_id].BPLC.values[0]
    return(bplc)

def get_sim_barcode_selection(sim_tab, design_id):
    barcode_selection = sim_tab[sim_tab.DESIGN_ID == design_id].BARCODESELECTION.values[0]
    return(barcode_selection)

def get_sim_primerset(sim_tab, design_id):
    primerset = sim_tab[sim_tab.DESIGN_ID == design_id].PRIMERSET.values[0]
    return(primerset)

def get_sim_theme_color(sim_tab, design_id):
    theme_color = sim_tab[sim_tab.DESIGN_ID == design_id].THEMECOLOR.values[0]
    return(theme_color)

def get_sim_bt(sim_tab, design_id):
    bt = sim_tab[sim_tab.DESIGN_ID == design_id].BITSCORE_THRESH.values[0]
    return(bt)

def get_full_length_sequences_list(sim_tab):
    full_length_sequences_list = []
    for i in range(sim_tab.shape[0]):
        design_id = sim_tab.DESIGN_ID.values[i]
        primerset = sim_tab.PRIMERSET.values[i]
        barcode_selection = sim_tab.BARCODESELECTION.values[i]
        f = data_dir + '/simulation/{}/{}_complex_oligo_pool.txt'.format(design_id, design_id)
        full_length_sequences_list.append(f)
    return(full_length_sequences_list)

def get_blast_database(sample, data_dir):
    blast_db = '{}/{}/input/{}.oriented.fasta'.format(data_dir, sample, sample)
    return(blast_db)

def get_blast_database_by_design_id(sam_tab, design_id, data_dir):
    sample = sim_tab[sim_tab.DESIGN_ID == design_id].SAMPLE.values[0]
    blast_db = data_dir + '/{}/input/{}.oriented.fasta'.format(sample, sample)
    return(blast_db)

def get_probes_dir(data_dir, sample):
    return('{}/{}/probes'.format(data_dir, sample))

def get_design_level(design_level):
    return(design_level)


data_dir = config['__default__']['DATA_DIR']
sim_input_filename = config['simulations']['simulation_table']
pipeline_version = os.path.basename(config['__default__']['SCRIPTS_PATH'])
sim_output_filename = get_simulation_summary_filenames(sim_input_filename)
design_list, sim_tab = get_simulation_list(sim_input_filename, data_dir)
full_length_sequences_list = get_full_length_sequences_list(sim_tab)
design_dir = ['{}/simulation/{}'.format(data_dir, dsgn) for dsgn in design_list]
for dsgn_dir in design_dir:
    if not os.path.exists(dsgn_dir):
        os.makedirs(dsgn_dir)

###############################################################################################################
# Snake rules
###############################################################################################################

rule all:
    input:
        # sim_output_filename
        # data_dir + '/04_02_2017/probes_summary/probe_summary.h5'
        # data_dir + '/04_02_2017/probe_write_complete.txt'
        # data_dir + '/simulation/DSGN0612/probe_write_complete.txt'
        # data_dir + '/simulation/DSGN0612/taxon_best_probes_summary.csv'
        sim_output_filename

checkpoint initialize_probe_design:
    input:
        fasta_filename = data_dir + '/{sample}/input/{sample}.fasta',
        sample_dir = data_dir + '/{sample}'
    output:
        design_probe_filename = directory(data_dir + '/{sample}/primer3')
    threads: 1
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_initialize_probe_design.py "
        "{input.fasta_filename} {input.sample_dir} "
        "-db {config[blast][16s_db]} "

rule design_probes:
    input:
        design_probe_filename = data_dir + '/{sample}/primer3/{mid}_primer3_input.txt'
        # design_probe_filename = checkpoints.initialize_probe_design.get(**wildcards).output[0] + '/{mid}_primer3_input.txt'
    output:
        design_probe_filename = data_dir + '/{sample}/primer3/{mid}_probes.csv'
    threads: 1
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_design_probes.py "
        "{input.design_probe_filename}"

def aggregate_primer3_output(wildcards):
    checkpoint_output = checkpoints.initialize_probe_design.get(**wildcards).output[0]
    probe_design_filenames = expand(data_dir + '/{sample}/primer3/{mid}_probes.csv', sample = wildcards.sample, mid = glob_wildcards(os.path.join(checkpoint_output, '{mid}_primer3_input.txt')).mid)
    return(probe_design_filenames)

rule combine_probes:
    input:
        aggregate_primer3_output
    output:
        data_dir + '/{sample}/probes_summary/probes_summary.h5'
    params:
        primer3_dir = data_dir + '/{sample}/primer3'
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_combine_probes.py {params.primer3_dir}"

checkpoint write_probes:
    input:
        probe_summary_filename = data_dir + '/{sample}/probes_summary/probes_summary.h5'
    output:
        probes_fasta_filename = directory(data_dir + '/{sample}/probes')
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_write_probes.py {input.probe_summary_filename}"

rule blast_probes:
    input:
        probe_fasta_dir = data_dir + '/{sample}/probes/{design_level}/{design_target}'
    output:
        probe_blast_filename = data_dir + '/{sample}/probes/{design_level}/{design_target}_blast_complete.txt'
    params:
        blast_database = lambda wildcards: get_blast_database(wildcards.sample, data_dir)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_blast_probes.py {input.probe_fasta_dir} {params.blast_database}"

rule evaluate_taxon_probes:
    input:
        probe_blast_complete_filename = data_dir + '/{sample}/probes/{design_level}/{design_target}_blast_complete.txt'
    output:
        data_dir + '/{sample}/evaluate/{design_level}/{design_target}_probe_evaluation_complete.txt'
    params:
        probes_dir = lambda wildcards: get_probes_dir(data_dir, wildcards.sample),
        design_level = lambda wildcards: get_design_level(wildcards.design_level)
    resources:
        mem_mb = 6000
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_evaluate_probes.py "
        "{input.probe_blast_complete_filename} "
        "-d {params.design_level}"

rule select_taxon_probes:
    input:
        probe_evaluation_complete_filename = lambda wildcards: get_taxon_probe_evaluation_complete_filename(sim_tab, wildcards.design_id, wildcards.design_target)
    output:
        taxon_design_evaluation_filename = data_dir + '/simulation/{design_id}/{design_target}_probe_selection.csv'
    threads: 1
    params:
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id),
        probe_selection_method = lambda wildcards: get_sim_probe_selection_method(sim_tab, wildcards.design_id),
        target_rank = lambda wildcards: get_sim_target_rank(sim_tab, wildcards.design_id),
        min_tm = lambda wildcards: get_sim_mintm(sim_tab, wildcards.design_id),
        max_tm = lambda wildcards: get_sim_maxtm(sim_tab, wildcards.design_id),
        gc = lambda wildcards: get_sim_gc(sim_tab, wildcards.design_id),
        mch = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id),
        bt = lambda wildcards: get_sim_bt(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_select_probes.py "
        "{input.probe_evaluation_complete_filename} {wildcards.design_id} {output.taxon_design_evaluation_filename} "
        "-t {params.target_rank} "
        "-tmin {params.min_tm} "
        "-tmax {params.max_tm} "
        "-m {params.mch} "
        "-gc {params.gc} "
        "-bot {params.bot} "
        "-bt {params.bt}"

rule add_spacers:
    input:
        taxon_design_evaluation_filename = data_dir + '/simulation/{design_id}/{design_target}_probe_selection.csv'
    output:
        taxon_design_evaluation_sa_filename = data_dir + '/simulation/{design_id}/{design_target}_probe_selection_sa.csv'
    params:
        probe_evaluation_filename = lambda wildcards: get_probe_evaluation_filename(sim_tab, wildcards.design_id, wildcards.design_target, data_dir),
        oriented_fasta_filename = lambda wildcards: get_oriented_fasta_filename(sim_tab, wildcards.design_id, data_dir),
        blast_lineage_filename = lambda wildcards: get_blast_lineage_filename(sim_tab, wildcards.design_id, data_dir),
        max_continuous_homology = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_add_spacers.py "
        "{input.taxon_design_evaluation_filename} "
        "{output.taxon_design_evaluation_sa_filename} "
        "-pef {params.probe_evaluation_filename} "
        "-off {params.oriented_fasta_filename} "
        "-blf {params.blast_lineage_filename} "
        "-mch {params.max_continuous_homology}"

def aggregate_probe_selection_output(wildcards):
    sample = sim_tab.loc[sim_tab.DESIGN_ID.values == wildcards.design_id, 'SAMPLE'].values[0]
    target_rank = sim_tab.loc[sim_tab.DESIGN_ID.values == wildcards.design_id, 'TARGET_RANK'].values[0]
    checkpoint_output = checkpoints.write_probes.get(sample = sample).output[0]
    design_level_dir = '{}/{}'.format(checkpoint_output, target_rank)
    design_level_target_dir = glob.glob('{}/*'.format(design_level_dir))
    design_level_target_list = [os.path.basename(dir) for dir in design_level_target_dir]
    probe_selection_complete_filenames = ['{}/simulation/{}/{}_probe_selection_sa.csv'.format(data_dir, wildcards.design_id, dsgn_id) for dsgn_id in design_level_target_list]
    print(probe_selection_complete_filenames)
    return(probe_selection_complete_filenames)

rule collect_selected_probe_information:
    input:
        aggregate_probe_selection_output,
        sim_filename = sim_input_filename,
        design_directory = data_dir + '/simulation/{design_id}',
    output:
        taxon_best_probes_filtered_filename = data_dir + '/simulation/{design_id}/taxon_best_probes_filtered.csv',
        probes_summary_filename = data_dir + '/simulation/{design_id}/taxon_best_probes_summary.csv'
    threads: 1
    params:
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_collect_taxon_best_probes.py "
        "{input.design_directory} {input.sim_filename} "
        "{output.taxon_best_probes_filtered_filename} {output.probes_summary_filename} {params.bot}"

rule generate_full_probes:
    input:
        taxon_best_probes_filtered_filename = data_dir + '/simulation/{design_id}/taxon_best_probes_filtered.csv',
    output:
        full_length_probes_filename = data_dir + '/simulation/{design_id}/{design_id}_full_length_probes_sequences.txt',
        full_length_blocking_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_blocking_probes_sequences.txt',
        full_length_helper_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_helper_probes_sequences.txt',
        full_length_probe_summary_filename = data_dir + '/simulation/{design_id}/{design_id}_full_length_probes_summary.txt'
    threads: 1
    params:
        design_dir = data_dir + '/simulation/{design_id}',
        utilities_directory = lambda wildcards: get_utilities_directory(sim_tab, wildcards.design_id, data_dir),
        evaluation_directory = lambda wildcards: get_evaluation_directory(sim_tab, wildcards.design_id, data_dir),
        blast_database = lambda wildcards: get_blast_database_by_design_id(sim_tab, wildcards.design_id, data_dir),
        bot = lambda wildcards: get_sim_bot(sim_tab, wildcards.design_id),
        mch = lambda wildcards: get_sim_mch(sim_tab, wildcards.design_id),
        bplc = lambda wildcards: get_sim_bplc(sim_tab, wildcards.design_id),
        primerset = lambda wildcards: get_sim_primerset(sim_tab, wildcards.design_id),
        target_rank = lambda wildcards: get_sim_target_rank(sim_tab, wildcards.design_id),
        barcode_selection = lambda wildcards: get_sim_barcode_selection(sim_tab, wildcards.design_id),
        theme_color = lambda wildcards: get_sim_theme_color(sim_tab, wildcards.design_id)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_generate_full_probes.py "
        "{params.design_dir} {params.utilities_directory} {params.evaluation_directory} {params.blast_database} "
        "{params.bot} {params.mch} {params.bplc} "
        "-ps {params.primerset} "
        "-t {params.target_rank} "
        "-bs {params.barcode_selection} "
        "-tc {params.theme_color}"

rule combine_full_length_sequences:
    input:
        full_length_probes_filename = data_dir + '/simulation/{design_id}/{design_id}_full_length_probes_sequences.txt',
        full_length_blocking_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_blocking_probes_sequences.txt',
        full_length_helper_probes_filename =  data_dir + '/simulation/{design_id}/{design_id}_full_length_helper_probes_sequences.txt'
    output:
        complex_oligo_pool_sequences = data_dir + '/simulation/{design_id}/{design_id}_complex_oligo_pool.txt'
    shell:
        "cat "
        "{input.full_length_probes_filename} "
        "{input.full_length_blocking_probes_filename} "
        "{input.full_length_helper_probes_filename} "
        "> {output.complex_oligo_pool_sequences}"

rule collect_probe_coverage_results:
    input:
        full_length_sequences_list,
        sim_input_filename = sim_input_filename,
        data_dir = data_dir
    output:
        sim_output_filename
    params:
        pipeline_version = pipeline_version
    threads: 1
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_collect_simulation_results.py "
        "{input.data_dir} {input.sim_input_filename} {params.pipeline_version} {output}"
